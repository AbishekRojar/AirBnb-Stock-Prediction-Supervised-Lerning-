# -*- coding: utf-8 -*-
"""Supervised Learning (AirBNB Stock Price Prediction).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AYOnHdBMrhnx9_qy-4862Y3CrcrlEhXY
"""

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics
import math

sns.set_theme(color_codes=True)

df=pd.read_csv('ABNB.csv')
df.head()

#convert date coloumn to datetime format
df['Date']=pd.to_datetime(df['Date'])
df.set_index('Date',inplace=True)
df.head()

#2.Data Analysis
#Visualizing stock Prediction
plt.figure(figsize=(12,6))
plt.plot(df.index,df['Close'], label='closing price history',color='c')
plt.xlabel("Date")
plt.ylabel("Stock Price (USD)")
plt.title("Airbnb Stock Closing Price Over Time")
plt.legend()
plt.xticks(rotation=90)
plt.show()

#Feature Engineering:Extracting Date Features
def create_features_datetime(df):
  df['year']=df.index.year
  df['month']=df.index.month
  df['day']=df.index.day
  df['dayofweek']=df.index.dayofweek
  return df

df=create_features_datetime(df)
df.head()

#3.Machine Learning Model for Stock Price Prediction
#splitting data into train and test set
x=df.drop(columns=['Close'])
y=df['Close']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

#Model:1  Descision Treee Regressor
dtree=DecisionTreeRegressor(random_state=0)
dtree.fit(x_train,y_train)

y_pred_dt=dtree.predict(x_test)

mae_dt=metrics.mean_absolute_error(y_test,y_pred_dt)
mse_dt=metrics.mean_squared_error(y_test,y_pred_dt)
r2_dt=metrics.r2_score(y_test,y_pred_dt)
rmse_dt=math.sqrt(mse_dt)

print(f'Decision Tree - MAE:{mae_dt},MSE:{mse_dt},R2:{r2_dt},RMSE:{rmse_dt}')

#Model:2 Random Forest Regressor
rf=RandomForestRegressor(random_state=0)
rf.fit(x_train,y_train)

y_pred_dt=rf.predict(x_test)

mae_rf=metrics.mean_absolute_error(y_test,y_pred_dt)
mse_rf=metrics.mean_squared_error(y_test,y_pred_dt)
r2_f2=metrics.r2_score(y_test,y_pred_dt)
rmse_rf=math.sqrt(mse_rf)

print(f"Random Forest - MAE:{mae_rf},MSE:{mse_rf},R2:{r2_f2},RMSE:{rmse_rf}")

#4.Visualizing Predictions

#Adding Predictions to the Dataset
df['Predicted Close']=rf.predict(x)

#Plot Actual VS Predicted Stock Prices
plt.figure(figsize=(12,6))
plt.plot(df.index,df['Close'],label='Actual Closing Price',color='blue')
plt.plot(df.index,df['Predicted Close'],label='Predicted Close Price',color='red',linestyle='dashed')
plt.xlabel("Date")
plt.ylabel("Stock Price (USD)")
plt.title("Airbnb Stock Price Prediction Using Random Forest")
plt.legend()
plt.xticks(rotation=90)
plt.show()